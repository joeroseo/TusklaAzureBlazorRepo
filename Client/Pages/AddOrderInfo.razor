@page "/orderinfo/add"
@page "/orderinfo/edit/{orderId:int}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using TusklaBlazor.Shared.Models
@using TusklaBlazor.Server.Models
@using Microsoft.AspNetCore.Components.Web
@using TusklaBlazor.Shared.Models
@using Blazored.LocalStorage
@using System.Text.Json
<!-- add an at symbol to require authentication - attribute [Authorize] -->
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage

<div class="flex-container">
    <div class="flex-child" style="border: 0.5px solid #d3d3d3">
        <div style="margin-left: 1px">
            <h3>Order Information</h3>
            <hr />

            <EditForm Model="@orderInfo" OnValidSubmit="SaveOrderInfo">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <div class="d-flex align-items-start">
                        <label for="Name" class="form-label">Name</label>
                        <div class="flex-grow-1">
                            <InputText class="form-control" @bind-Value="orderInfo.Name" />
                            <ValidationMessage For="@(() => orderInfo.Name)" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="d-flex align-items-start">
                        <label for="Address" class="form-label">Address</label>
                        <div class="flex-grow-1">
                            <InputText class="form-control" @bind-Value="orderInfo.Address" />
                            <ValidationMessage For="@(() => orderInfo.Address)" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="d-flex align-items-start">
                        <label for="City" class="form-label">City</label>
                        <div class="flex-grow-1">
                            <InputText class="form-control" @bind-Value="orderInfo.City" />
                            <ValidationMessage For="@(() => orderInfo.City)" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="d-flex align-items-start">
                        <label for="State" class="form-label">State</label>
                        <div class="flex-grow-1">
                            <InputText class="form-control" @bind-Value="orderInfo.State" />
                            <ValidationMessage For="@(() => orderInfo.State)" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="d-flex align-items-start">
                        <label for="Zip" class="form-label">Zip</label>
                        <div class="flex-grow-1">
                            <InputText class="form-control" @bind-Value="orderInfo.Zip" />
                            <ValidationMessage For="@(() => orderInfo.Zip)" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="d-flex align-items-start">
                        <label for="Email" class="form-label">Email</label>
                        <div class="flex-grow-1">
                            <InputText class="form-control" @bind-Value="orderInfo.Email" />
                            <ValidationMessage For="@(() => orderInfo.Email)" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <br />
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button class="btn btn-primary" @onclick="Cancel">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int orderId { get; set; }
    protected string Title = "Add";
    private List<Item> orderItems;
    protected VehicleOrderInfo orderInfo = new VehicleOrderInfo
        {
            Name = "Joseph O'Connor",
            Address = "144 Castlegate Ln",
            City = "St Johns",
            State = "FL",
            Zip = "32259",
            Email = "joerosejax@gmail.com"
        };

    protected override async Task OnParametersSetAsync()
    {
        if (orderId != 0)
        {
            Title = "Edit";
            orderInfo = await Http.GetFromJsonAsync<VehicleOrderInfo>("api/VehicleOrderInfo/" + orderId);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchOrderItems(orderId);

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing ShowOrder component: {ex.Message}");
        }
    }

    private async Task FetchOrderItems(int orderId)
    {
        try
        {
            // Retrieve serialized order items from local storage
            string serializedOrderItems = await LocalStorage.GetItemAsStringAsync("itemList");

            // Deserialize the JSON data into a List<Item> object
            if (!string.IsNullOrWhiteSpace(serializedOrderItems))
            {
                orderItems = JsonSerializer.Deserialize<List<Item>>(serializedOrderItems);
            }
            else { Console.WriteLine($"No Data"); }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Error fetching order items: {ex.Message}");
        }
    }

    protected async Task SaveOrderInfo()
    {
        if (orderInfo.OrderId != 0)
        {
            await Http.PutAsJsonAsync("api/VehicleOrderInfo", orderInfo);
        }
        else
        {
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/VehicleOrderInfo", orderInfo);
            if (response.IsSuccessStatusCode)
            {
                string orderIdString = await response.Content.ReadAsStringAsync();
                if (int.TryParse(orderIdString, out int newOrderId))
                {
                    orderId = newOrderId;

                    try
                    {
                        // Retrieve serialized order items from local storage
                        string serializedOrderItems = await LocalStorage.GetItemAsStringAsync("itemList");

                        // Deserialize the JSON data into a List<Item> object
                        if (!string.IsNullOrWhiteSpace(serializedOrderItems))
                        {
                            orderItems = JsonSerializer.Deserialize<List<Item>>(serializedOrderItems);
                        }

                        foreach (var item in orderItems)
                        {
                            // Set the orderId property from orderId instead of orderInfo.OrderId.ToString()
                            item.OrderId = orderId.ToString();
                            Console.WriteLine($"item.OrderId is: {item.OrderId}");
                            Console.WriteLine($"orderId is: {orderId}");
                            HttpResponseMessage response2 = await Http.PostAsJsonAsync("api/VehicleOrderItems", item);
                            if (!response2.IsSuccessStatusCode)
                            {
                                // Handle failure to add item
                                // For example: Log error, display error message to user, etc.
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        // Handle exception
                        Console.WriteLine($"Error fetching order items: {ex.Message}");
                    }

                    // Navigate to ShowOrder component with the orderId parameter

                    Console.WriteLine($"orderId is:  {orderId}");
                    NavigationManager.NavigateTo($"/showorder?orderId={orderId}");
                }
            }
        }
    }

    public void Cancel()
    {
        NavigationManager.NavigateTo("/fetchorderinfo");
    }
}
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        background-color: #f4f4f4;
    }

    .flex-container {
        display: flex;
        margin: 20px;
        justify-content: center; /* Horizontally center the flex items */
    }

    .flex-child {
        display: flex;
        width: 60%;
        padding: 10px;
        background-color: #f4f4f4;
        border: 1px solid #d3d3d3;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        width: 120px;
        text-align: left;
        margin-right: 10px;
    }

    .form-control {
        width: 150%;
    }

    .btn {
        margin-right: 5px;
    }
</style>
