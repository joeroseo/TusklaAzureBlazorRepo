@page "/cart"
@using TusklaBlazor.Shared.Services
@using TusklaBlazor.Shared.Models
@inject CartService CartService
@inject NavigationManager NavigationManager

<h1>Shopping Cart</h1>

@if (CartService.CartItems.Count == 0)
{
    <p>Your cart is empty.</p>
}
else
{

<div class="flex-container">
    <!-- Order Items -->
    <div class="flex-child" style="border: 0.5px solid #d3d3d3">
        <div style="margin-left: 1px">
            @if (CartService.CartItems != null && CartService.CartItems.Any())
            {
                <h4>Order Items</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Description</th>
                            <th>Price</th>
                            <th>Quantity</th>
                        </tr>
                    </thead>
                    <tbody>
                            @foreach (var item in CartService.CartItems)
                        {
                            <tr>
                            <td><img src="@item.Product.imageSource" class="img-fluid rounded-3" alt="Shopping item" style="width: 100px; padding-left: 20px" /> </td>
                            <td>@item.Product.Name &nbsp</td>
                            <td>@item.Product.Price.ToString("C0")</td>
                            <td>@item.Quantity</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No items found in the order.</p>
            }
        </div>
    </div>
    

    <!-- Order Details -->
    <div class="flex-child" style="border: 0.5px solid #d3d3d3">
        <div class="col-lg-12">
            <div class="card rounded-0 border-0" style="background-color: #f4f4f4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h5 class="mb-0">Order Details</h5>
                    </div>
                    <hr class="my-2" />
                    <div class="d-flex justify-content-between">
                        <p class="mb-2">Subtotal</p>
                        <p class="mb-2" >
                            <i class="bi bi-currency-dollar"></i>@cartTotal.ToString("C0")
                        </p>
                    </div>
                    <div class="d-flex justify-content-between">
                        <p class="mb-2">Tax</p>
                        <p class="mb-2">
                                <i class="bi bi-currency-dollar"></i>@Math.Round(@cartTotal * 0.075m, 0).ToString("C0")
                        </p>
                    </div>
                    <div class="d-flex justify-content-between">
                        <p class="mb-2">Shipping</p>
                            <p class="mb-2"><i class="bi bi-currency-dollar"></i>@Math.Round(@cartTotal * 0.05m, 0).ToString("C0")</p>
                    </div>
                    <div class="d-flex justify-content-between mb-4">
                        <p class="mb-2">Total</p>
                        <p class="mb-2">
                                <i class="bi bi-currency-dollar"></i>@Math.Round(@cartTotal * 1.125m, 0).ToString("C0")
                        </p>
                    </div>
                    <br />
                    <br />
                            @if (CartService.CartItems.Count > 0)
                            {
                                <div><a class="btn btn-primary" @onclick="Checkout">Add Order</a></div>
                            }
               </div>
            </div>
        </div>
    </div>
    
</div>
}

@code {
    decimal cartTotal = 0;
    

    void UpdateQuantity(CartItem cartItem, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int quantity))
        {
            CartService.UpdateQuantity(cartItem, quantity);
            cartTotal = CartService.GetCartTotal();
        }
    }

    void NavigateToProductsPage()
    {
        NavigationManager.NavigateTo("/showproducts");
    }
    
    async Task Checkout()
    {
        // Implement checkout logic
        //await CartService.ProcessCheckout();
        NavigationManager.NavigateTo("/orderproductinfo/add");
            }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"totalCartItems.Count {CartService.CartItems.Count}");
        cartTotal = CartService.GetCartTotal();
    }
}
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        background-color: #f4f4f4;
    }

    .flex-container {
        display: flex;
        justify-content: space-between;
        margin: 50px;
        gap: 30px;
    }

    .flex-child {
        flex: 1;
        border: 1px solid #d3d3d3;
        padding: 10px;
        background-color: #ffffff;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        padding: 8px;
        border-bottom: 1px solid #ddd;
    }

    th {
        text-align: left;
    }

    input[type="number"] {
        width: 60px;
    }

   
</style>
