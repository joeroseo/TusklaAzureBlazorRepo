@page "/showitems"

@using Microsoft.AspNetCore.Components.Web
@using TusklaBlazor.Server.Models
@using TusklaBlazor.Shared.Models
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@using System.Text.Json

<div class="flex-container">
    <!-- Order Items -->
    <div class="flex-child" style="border: 0.5px solid #d3d3d3">
        <div style="margin-left: 1px">
            @if (orderItems != null && orderItems.Any())
            {
                <h4>Order Items</h4>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in orderItems)
                        {
                            <tr>
                                <td>@item.Description</td>
                                <td>@item.Price.ToString("C0")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No items found in the order.</p>
            }
        </div>
    </div>

    <!-- Order Details -->
    <div class="flex-child" style="border: 0.5px solid #d3d3d3">
        <div class="col-lg-12">
            <div class="card rounded-0 border-0" style="background-color: #f4f4f4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h5 class="mb-0">Order Details</h5>
                    </div>
                    <hr class="my-4" />
                    <div class="d-flex justify-content-between">
                        <p class="mb-2">Subtotal</p>
                        <p class="mb-2" style="margin-right: 10px">
                            <i class="bi bi-currency-dollar"></i>@subTotal.ToString("C0")
                        </p>
                    </div>
                    <div class="d-flex justify-content-between">
                        <p class="mb-2">Tax</p>
                        <p class="mb-2">
                            <i class="bi bi-currency-dollar"></i>@Tax.ToString("C0")
                        </p>
                    </div>
                    <div class="d-flex justify-content-between">
                        <p class="mb-2">Destination Fee</p>
                        <p class="mb-2"><i class="bi bi-currency-dollar"></i>$1,390</p>
                    </div>
                    <div class="d-flex justify-content-between">
                        <p class="mb-2">*Order Fee</p>
                        <p class="mb-2"><i class="bi bi-currency-dollar"></i>$250</p>
                    </div>
                    <div class="d-flex justify-content-between mb-4">
                        <p class="mb-2">Total</p>
                        <p class="mb-2">
                            <i class="bi bi-currency-dollar"></i>@Total.ToString("C0")
                        </p>
                    </div>
                    <p style="font-size: 13px">
                        <strong>*The $250 order fee is due today and the balance upon delivery</strong>
                    </p>
                    <br />
                    <br />
                    <button @onclick="AddOrderInfo" class="btn btn-primary" style="margin-top:-15px;">Continue</button>

                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private VehicleOrderInfo VehicleOrderInfo;
    private List<Item> orderItems;
    private decimal subTotal = 0; // Changed from int to decimal
    private decimal Tax = 0; // Changed from int to decimal
    private decimal Total = 0;

    private async Task LoadItemList()
    {
        try
        {
            string serializedOrderItems = await LocalStorage.GetItemAsStringAsync("itemList");

            // Deserialize the JSON data into a List<Item> object
            if (!string.IsNullOrWhiteSpace(serializedOrderItems))
            {
                orderItems = JsonSerializer.Deserialize<List<Item>>(serializedOrderItems);

                // Log the deserialized order items for debugging
                Console.WriteLine("Deserialized Order Items:");
                Console.WriteLine(JsonSerializer.Serialize(orderItems));

                // Calculate the subtotal based on the loaded items
                CalculateSubTotal();
                Tax = 0.07m * subTotal; // Ensure both operands are of the same type (decimal)
                CalculateTotal(); // Calculate the Total
            }
            else
            {
                // Handle case when no items are found in local storage
                Console.WriteLine("No serialized order items found in local storage.");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions by logging and possibly displaying an error message
            Console.WriteLine($"Error loading order items: {ex.Message}");
            // Optionally, display an error message to the user
            // errorMessage = "An error occurred while loading order items.";
        }
    }

    private void CalculateSubTotal()
    {
        subTotal = orderItems.Sum(item => item.Price);
    }

    private void AddOrderInfo()
    {
        NavigationManager.NavigateTo("/orderinfo/add");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadItemList();
    }

    private void CalculateTotal()
    {
        Total = subTotal + Tax + 1390 + 250;
    }
}

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        background-color: #f4f4f4;
    }

    .flex-container {
        display: flex;
        justify-content: space-between;
        margin: 20px;
    }

    .flex-child {
        width: 48%;
        padding: 10px;
        background-color: #f4f4f4;
        border: 1px solid #d3d3d3;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th,
        .table td {
            border: 1px solid #d3d3d3;
            padding: 8px;
        }

        .table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

    p {
        margin-bottom: 0.1em;
        margin-top: 0.1em;
        margin: 10px;
        font-size: 14px;
    }

    i {
        margin-right: 5px;
    }
</style>
